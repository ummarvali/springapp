name: spring app

on: push

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          persist-credentials: false

      - name: develop
        run: |
            mvn clean
            mkdir - p reports
  package:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          persist-credentials: false
          
      - name: package
        run: |
           mvn package && ls -ltr
           mv **/*.jar target/app.jar
           cd target && ls -ltr
  sonarscan:
    runs-on: ubuntu-latest
    needs: package
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          persist-credentials: false
          
      - name: sonar
        run: |
            mvn compile
            mvn sonar:sonar \
              -Dsonar.projectKey=actions \
              -Dsonar.host.url=https://sonarqube-1749-3725.dc-ig-lib-ga-1589529604-f72ef11f3ab089a8c677044eb28292cd-0000.au-syd.containers.appdomain.cloud \
              -Dsonar.login=1d36b3f65a1e157432c4b582d483db463372f7bb

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        with:
           args: >
             -Dsonar.projectKey=actions
             -Dsonar.projectVersion=1.0
             -Dsonar.sources=src/main/java
             -Dsonar.sourceEncoding=UTF-8
             -Dsonar.language=java
             -Dsonar.java.binaries=target/classes
             
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
       
  docker-build:
    runs-on: ubuntu-latest
    needs: sonarscan
    steps:   
      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          registry: us.icr.io/dc-tools
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: build
        run: |
            docker login us.icr.io/dc-tools -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
            docker build --no-cache . -t  us.icr.io/dc-tools/springapp:latest
            
      - name: Docker Push
        run: docker push us.icr.io/dc-tools/springapp:latest
        
  openshift-deploy:
    runs-on: ubuntu-latest
    needs: docker-build
    steps:      
      - name: openshift deploy
        run: |
              oc login https://c100-e.us-south.containers.cloud.ibm.com:32634 --token=eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJkZWZhdWx0Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZWNyZXQubmFtZSI6Im1haW50ZW5hbmNlLXRva2VuLTR2YnE0Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6Im1haW50ZW5hbmNlIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQudWlkIjoiNTdmNTk5MGItNjlkNy0xMWVhLThjNTgtYmVmNTg2MWE3ZWZjIiwic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50OmRlZmF1bHQ6bWFpbnRlbmFuY2UifQ.n4F3ps5K1ULb0pPpRRtjHGuQvuKayIGEZKcYxk-4cX1u5rL40_24iIDh7hux5j6trM-_m7HV3V_zGtQQl933G_jER7WGE1sutnWEtwMCJZVZnBIp1eVkAHpFOtuRgmZE3Rx_xY5u-VRQWUmTLHgbQEO_l_FKGo8LijUIPau2FmE6AnrTuxFuNXNXmdUKvsder-kLwrBK1t1L5M5_PKx6VLYoPsgW2N4Nj8E8CCnSFFpvll7G8Ifqetxp9S48NJYcJExPSJhpgD6GGGC6c5J1JHlqgpZZZ1d9mYT7l9Vfg4osBU3Uj1Dc20KgNtw9kdAGNvPCXxJcNKDfxwwBsQkW6A
              oc project dc-dev
              pwd
              ls -ltr
              oc create secret docker-registry docker-repo-cred \
              --docker-server=${DOCKER_URL} \
              --docker-username=${DOCKER_USERNAME} \
              --docker-password=${DOCKER_PASSWORD} \
              --docker-email=${DOCKER_PASSWORD} \
              --namespace=${NAMESPACE} || true
              sed -e "s~{REGISTRY_NAME}~$DOCKER_URL~g" \
                  -e "s~{DOCKER_IMAGE}~$DOCKER_IMAGE~g" \
                  -e "s~{DOCKER_TAG}~$DOCKER_TAG~g" \
                  -e "s~{K8S_DEPLOYMENT}~$K8S_DEPLOYMENT~g" \
                       -e "s~{NAMESPACE}~$NAMESPACE~g"\
                  -e "s~{INGRESS_URL}~$INGRESS~g" -i devops/k8s/*.yml
              
              oc apply -f devops/k8s/ --namespace="${NAMESPACE}" || true
              oc create route edge --service=${K8S_DEPLOYMENT}-svc --hostname=$K8S_DEPLOYMENT.$INGRESS ||true
              oc get route ${K8S_DEPLOYMENT}-svc || true
              oc wait --for=condition=available --timeout=120s deployment/${K8S_DEPLOYMENT} --namespace="${NAMESPACE}" || true   
        
